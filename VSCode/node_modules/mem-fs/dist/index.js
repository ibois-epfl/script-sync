import { EventEmitter } from 'events';
import path from 'path';
import { vinylFileSync } from 'vinyl-file';
import File from 'vinyl';
import { PassThrough } from 'stream';
function loadFile(filepath) {
    try {
        return vinylFileSync(filepath);
    }
    catch (err) {
        return new File({
            cwd: process.cwd(),
            base: process.cwd(),
            path: filepath,
            contents: null,
        });
    }
}
export class Store extends EventEmitter {
    loadFile;
    store = new Map();
    constructor(options) {
        super();
        this.loadFile =
            options?.loadFile ?? loadFile;
    }
    load(filepath) {
        const file = this.loadFile(filepath);
        this.store.set(filepath, file);
        return file;
    }
    get(filepath) {
        filepath = path.resolve(filepath);
        return this.store.get(filepath) || this.load(filepath);
    }
    existsInMemory(filepath) {
        filepath = path.resolve(filepath);
        return this.store.has(filepath);
    }
    add(file) {
        this.store.set(file.path, file);
        this.emit('change', file.path);
        return this;
    }
    each(onEach) {
        this.store.forEach((file) => {
            onEach(file);
        });
        return this;
    }
    all() {
        return Array.from(this.store.values());
    }
    stream({ filter = () => true } = {}) {
        const stream = new PassThrough({ objectMode: true, autoDestroy: true });
        setImmediate(() => {
            this.each((file) => filter(file) && stream.write(file));
            stream.end();
        });
        return stream;
    }
}
export function create() {
    return new Store();
}
