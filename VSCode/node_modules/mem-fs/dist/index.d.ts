/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { EventEmitter } from 'events';
import File from 'vinyl';
import { PassThrough } from 'stream';
export type StreamOptions<StoreFile extends {
    path: string;
} = File> = {
    filter?: (file: StoreFile) => boolean;
};
export declare class Store<StoreFile extends {
    path: string;
} = File> extends EventEmitter {
    loadFile: (filepath: string) => StoreFile;
    private store;
    constructor(options?: {
        loadFile?: (filepath: string) => StoreFile;
    });
    private load;
    get(filepath: string): StoreFile;
    existsInMemory(filepath: string): boolean;
    add(file: StoreFile): this;
    each(onEach: (file: StoreFile) => void): this;
    all(): StoreFile[];
    stream({ filter }?: StreamOptions<StoreFile>): PassThrough;
}
export declare function create<StoreFile extends {
    path: string;
} = File>(): Store<StoreFile>;
