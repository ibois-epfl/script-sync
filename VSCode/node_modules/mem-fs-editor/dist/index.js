import read from './actions/read.js';
import readJSON from './actions/read-json.js';
import exists from './actions/exists.js';
import write from './actions/write.js';
import writeJSON from './actions/write-json.js';
import extendJSON from './actions/extend-json.js';
import append from './actions/append.js';
import appendTpl from './actions/append-tpl.js';
import deleteAction from './actions/delete.js';
import { copy, _copySingle } from './actions/copy.js';
import { copyTpl, _processTpl } from './actions/copy-tpl.js';
import { copyAsync, _copySingleAsync } from './actions/copy-async.js';
import copyTplAsync from './actions/copy-tpl-async.js';
import move from './actions/move.js';
import commit from './actions/commit.js';
import commitFileAsync from './actions/commit-file-async.js';
import dump from './actions/dump.js';
export class MemFsEditor {
    store;
    constructor(store) {
        this.store = store;
    }
}
MemFsEditor.prototype.read = read;
MemFsEditor.prototype.readJSON = readJSON;
MemFsEditor.prototype.exists = exists;
MemFsEditor.prototype.write = write;
MemFsEditor.prototype.writeJSON = writeJSON;
MemFsEditor.prototype.extendJSON = extendJSON;
MemFsEditor.prototype.append = append;
MemFsEditor.prototype.appendTpl = appendTpl;
MemFsEditor.prototype.delete = deleteAction;
MemFsEditor.prototype.copy = copy;
MemFsEditor.prototype._copySingle = _copySingle;
MemFsEditor.prototype.copyTpl = copyTpl;
MemFsEditor.prototype._processTpl = _processTpl;
MemFsEditor.prototype.copyAsync = copyAsync;
MemFsEditor.prototype._copySingleAsync = _copySingleAsync;
MemFsEditor.prototype.copyTplAsync = copyTplAsync;
MemFsEditor.prototype.move = move;
MemFsEditor.prototype.commit = commit;
MemFsEditor.prototype.commitFileAsync = commitFileAsync;
MemFsEditor.prototype.dump = dump;
export function create(store) {
    return new MemFsEditor(store);
}
