name: PublishScriptSync

# TODO: switch to this one
# on:
#   release:
#     types: [published]

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ########################### yak ############################
  build_yak:
    runs-on: windows-latest
  
    steps:
    - uses: actions/checkout@v2
  
    - name: Python setup
      uses: actions/setup-python@v2
      with:
          python-version: '3.x'
  
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install invoke
  
    # install dotnet for building the RhinoCs plugin
    - name: Install .NET Framework 4.8
      uses: microsoft/setup-msbuild@v1.0.2
  
    - name: Run Invoke Yakerizer task
      run: invoke yakerize
  
    - name: Save artifact
      uses: actions/upload-artifact@v2
      with:
        name: scriptsync_yak_package
        path: yaker\build\*.yak

  publish_yak:
    needs: build_yak
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: scriptsync_yak_package
        path: yaker\build
    
    # before run this get a token from your local machine with `yak.exe login --ci`
    # # this is a dummy test
    # - name: Publish to Yak test server
    #   run: |
    #     $YAK_FILE=$(ls *.yak)
    #     echo "Yak file: $YAK_FILE"
    #     ..\exec\Yak.exe push --source https://test.yak.rhino3d.com $YAK_FILE
    #   working-directory: yaker\build
    #   env:
    #     YAK_TOKEN: ${{ secrets.YAK_IBOIS_TOKEN }}
    #   continue-on-error: true
    # # this is also a dummy test
    # - name: Verify the Yak test package
    #   run: |
    #     ..\exec\Yak.exe search --source https://test.yak.rhino3d.com --all --prerelease script-sync
    #   working-directory: yaker\build
    #   env:
    #       YAK_TOKEN: ${{ secrets.YAK_IBOIS_TOKEN }}
    # real release
    - name: Publish to Yak test server
      run: |
        $YAK_FILE=$(ls *.yak)
        echo "Yak file: $YAK_FILE"
        ..\exec\Yak.exe push $YAK_FILE
      working-directory: yaker\build
      env:
        YAK_TOKEN: ${{ secrets.YAK_IBOIS_TOKEN }}
    # check the real release
    - name: Verify the Yak test package
      run: |
        ..\exec\Yak.exe search --all --prerelease script-sync
      working-directory: yaker\build
      env:
          YAK_TOKEN: ${{ secrets.YAK_IBOIS_TOKEN }}

  ########################### vsix ############################
  build_vsix:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Python setup
      uses: actions/setup-python@v2
      with:
          python-version: '3.x'

    - name: Install pip and invoke
      run: |
          python -m pip install --upgrade pip
          pip install invoke

    - name: Sync version
      run: invoke syncv

    - name: Install vsce
      run: npm install -g vsce

    - name: Build VSIX package
      run: |
        cd VSCode/scriptsync
        npm install
        vsce package

    - name: Save artifact
      uses: actions/upload-artifact@v2
      with:
        name: script-sync
        path: VSCode/scriptsync/*.vsix

  publish_vsix:
    needs: build_vsix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install VSCE
      run: npm install -g vsce

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: script-sync
        path: VSCode\scriptsync

    - name: Publish to VSCode Marketplace
      run: |
        cd VSCode\scriptsync
        vsce publish -p ${{ secrets.AZURE_OP_TOKEN }}
      working-directory: VSCode\scriptsync

    - name: Verify the VSCode Marketplace package
      run: |
        vsce show ibois-epfl.script-sync



